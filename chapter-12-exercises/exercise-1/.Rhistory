# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
vehicle_makes <- select(vehicles, make)
install.packages("dplyr")
library("dplyr")
install.packages("dplyr")
library("dplyr")
install.packages("dplyr")
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- min(two_wheel_20_cty$hwy)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-11-exercises/exercise-1/exercise.R', echo=TRUE)
install.packages("devtools")
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- min(two_wheel_20_cty$hwy)
worst_vehicle_id <- two_wheel_20_cty[two_wheel_20_cty$hwy == worst_hwy, "id"]
best_mpg_hwy <- function(year_choice, make_choice) {
vehicles_filtered <- vehicles[vehicles$year == year_choice &
vehicles$make == make_choice, ]
best_mpg <- max(vehicles_filtered$hwy)
vehicles_filtered[vehicles_filtered$hwy == best_mpg, "model"]
}
# What was the most efficient Honda model of 1995?
best_honda_1995 <- best_mpg_hwy(1995, "Honda")
install.packages("titanic")
print(survival_rate("3rd"))
source('C:/Users/msios/Desktop/INFO 201/a3-using-data-mayasioson1/assignment.R', echo=TRUE)
setwd("C:/Users/msios/Desktop/INFO 201/a3-using-data-mayasioson1")
source('C:/Users/msios/Desktop/INFO 201/a3-using-data-mayasioson1/assignment.R', echo=TRUE)
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library("fueleconomy")
View(vehicles)
vehicles_2015_acura <- vehicles[vehicles$year == 2015 &
vehicles$make == "Acura", ]
best_hwy <- max(vehicles_2015_acura$hwy)
best_vehicle_hwy <- vehicles_2015_acura[vehicles_2015_acura$hwy == best_hwy, "model"]
best_vehicle_hwy <- vehicles_2015_acura[vehicles_2015_acura$hwy == best_hwy, "model"]
vehicles_2015_acura <- filter(vehicles, year == 2015, make == "Acura")
best_hwy_mpg <- max(vehicles_2015_acura$hwy)
best_vehicle_hwy <- filter(vehicles_2015_acura, hwy == best_hwy_mpg)
best_vehicle_hwy <- filter(vehicles_2015_acura, hwy == best_hwy_mpg)
best_vehicle_hwy <- filter(vehicles_2015_acura, hwy == best_hwy_mpg, model)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-11-exercises/exercise-2/exercise.R', echo=TRUE)
select(worst_hwy, id)
best_vehicle_hwy_model <- select(best_vehicle_hwy, model)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
View(flights)
??flights
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrows(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, air_time_gain = arr_delay - dep_delay)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-11-exercises/exercise-4/exercise.R', echo=TRUE)
flights <- flights %>%
mutate(air_time_gain = arr_delay - dep_delay)
arrange(-air_time_gain)
View(flights)
?count
flights <- flights %>%
mutate(air_time_gain = arr_delay - dep_delay) %>%
arrange(-air_time_gain)
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$air_time_gain)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average <- summarize(flights, average_gain = mean(flights$air_time_gain))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average <- summarize(flights, average_gain = mean(flights$air_time_gain, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_seatac <- select(flights, dest == "SEA", origin, air_time_gain)
flights <- flights %>%
mutate(gain_in_air = arr_delay - dep_delay) %>%
arrange(-gain_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average <- summarize(flights, average_gain = mean(flights$gain_in_air, na.rm = TRUE))
# lost time on average!
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_seatac <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, gain_in_air)
View(to_seatac)
# On average, did flights to SeaTac gain or loose time?
average <- summarize(to_seatac, average_gain = mean(to_seatac$gain_in_air, na.rm = TRUE))
setwd("C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-11-exercises/exercise-4")
# (without showing any other data)!
air_time_info <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarize(average = mean(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE)
)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
View(flights)
grouped <- flights %>%
group_by(month) %>%
summarize(average_dep_delay = mean(dep_delay, na.rm = TRUE))
average_dep_delay <- flights %>%
group_by(month) %>%
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
View(average_dep_delay)
# Which month had the greatest average departure delay?
most_delay_month <- select(dep_delay_by_month, avg_dep_delay = max(avg_dep_delay))
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
most_delay_month <- select(dep_delay_by_month, avg_dep_delay = max(avg_dep_delay))
View(dep_delay_by_month)
most_delay_month <- dep_delay_by_month %>%
filter(avg_dep_delay = max(avg_dep_delay)) %>%
select(month)
most_delay_month <- dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
arr_delay_by_dest <- flights %>%
group_by(arr_delay)
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE))
head(arr_delay_by_dest)
View(arr_delay_by_dest)
View(dep_delay_by_month)
arr_delay_by_dest <- flights %>%
group_by(dest)
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE))
arr_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE))
View(arr_delay_by_dest)
head(arr_delay_by_dest)
arr_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE))
arrange(-avg_arr_delay)
head(arr_delay_by_dest)
arr_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-avg_arr_delay)
head(arr_delay_by_dest)
View(airports)
View(airports)
speed_by_dest <- flights %>%
group_by(dest) %>%
mutate(avg_speed = distance / air_time) %>%
select(avg_speed) %>%
arrange(-avg_speed)
head(speed_by_dest)
View(speed_by_dest)
speed_by_dest <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed, na.rm = TRUE))
head(speed_by_dest)
fastest_flight <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed, na.rm = TRUE))
filter(avg_speed == max(avg_speed, na.rm = TRUE))
fastest_flight <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarize(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
arr_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE))
View(arr_delay_by_dest)
View(airports)
combined_delay_info <- left.join(arr_delay_by_dest, airports, by = c("dest" = "faa"))
combined_delay_info <- left_join(arr_delay_by_dest, airports, by = c("dest" = "faa"))
View(combined_delay_info)
largest_arr_delay <- combined_delay_info %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = TRUE)) %>%
select(name)
View(airlines)
?flights
arr_delay_by_airline <- flights %>%
group_by(carrier)
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE))
left_join(airlines, by = "carrier")
arr_delay_by_airline <- flights %>%
group_by(carrier) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier")
arr_delay_by_airline <- flights %>%
group_by(carrier) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airlines, by = "carrier")
View(arr_delay_by_airline)
smallest_arr_delay <- arr_delay_by_airline %>%
filter(avg_arr_delay = min(avg_arr_delay, na.rm = TRUE)) %>%
select(name)
smallest_arr_delay <- arr_delay_by_airline %>%
filter(avg_arr_delay == min(avg_arr_delay, na.rm = TRUE)) %>%
select(name)
view(mtcars)
View(mtcars)
View(vehicles)
best_model <- vehicles %>%
filter(year == 2015, make == "Acura") %>%
filter(hwy == max(hwy))
select(model)
best_model <- vehicles %>%
filter(year == 2015, make == "Acura") %>%
filter(hwy == max(hwy)) %>%
select(model)
# Load necessary packages (`tidyr`, `dplyr`, and `ggplot2`)
library("tidyr")
# Load necessary packages (`tidyr`, `dplyr`, and `ggplot2`)
install.packages("tidyr")
library("tidyr")
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("dplyr")
setwd("C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-12-exercises/exercise-1")
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- read.csv("data/avocado.csv", stringsAsFactors = FALSE)
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- read.csv("data/avocado.csv", stringsAsFactors = FALSE)
View(avocados)
# To tell R to treat the `Date` column as a date (not just a string)
# Redefine that column as a date using the `as.Date()` function
# (hint: use the `mutate` function)
avocados <- mutate(avocados, Date = as.Date(Date))
?rename
# The file had some uninformative column names, so rename these columns:
# `X4046` to `small_haas`
# `X4225` to `large_haas`
# `X4770` to `xlarge_haas`
rename(avocados, x4046 = small_haas, x4225 = large_haas, x4770 = xlarge_haas)
# The file had some uninformative column names, so rename these columns:
# `X4046` to `small_haas`
# `X4225` to `large_haas`
# `X4770` to `xlarge_haas`
rename(avocados, x4046 = "small_haas", x4225 = "large_haas", x4770 = "xlarge_haas")
# The file had some uninformative column names, so rename these columns:
# `X4046` to `small_haas`
# `X4225` to `large_haas`
# `X4770` to `xlarge_haas`
rename(avocados, x4046 = "small_haas", x4225 = "large_haas", x4770 = "xlarge_haas")
# The file had some uninformative column names, so rename these columns:
# `X4046` to `small_haas`
# `X4225` to `large_haas`
# `X4770` to `xlarge_haas`
rename(avocados, X4046 = "small_haas", X4225 = "large_haas", X4770 = "xlarge_haas")
# The file had some uninformative column names, so rename these columns:
# `X4046` to `small_haas`
# `X4225` to `large_haas`
# `X4770` to `xlarge_haas`
rename(avocados, X4046 = small_haas, X4225 = large_haas, X4770 = xlarge_haas)
