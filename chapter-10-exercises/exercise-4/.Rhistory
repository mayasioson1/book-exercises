length(squared_numbers)
length(squared_numbers)/2
?median
squared_median <- median(squared_numbers)
squares <- numbers[sqrt(numbers) == numbers]
squares <- numbers[sqrt(numbers) = numbers]
squares <- numbers[round(sqrt(numbers)) == numbers]
print(squares)
?round
squares <- numbers[round(sqrt(numbers)) == numbers
squares <- numbers[round(sqrt(numbers)) == numbers]
squares <- numbers[round(sqrt(numbers)) == sqrt(numbers)]
print(squares)
?as.Date
spring_break <- as.Date("2019-03-16")
?example
example(as.Date)
?as.Date
spring_break <- as.Date("16march2019")
spring_break <- as.Date("16mar2019")
spring_break <- as.Date("2019-03-16")
?Sys.Date
days_to_break <- spring_break - today
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
?format
parent_bday <- format(birthdays[["dad"]], "%m/%d")
birthdays <- list(
dad = as.Date("1972-12-04"),
mom = as.Date("1966-08-29"),
karina = as.Date("1996-09-11")
)
parent_bday <- format(birthdays[["dad"]], "%m/%d")
print(parent_bday)
print(spring_break)
birthdays_2019 <- lapply(birthdays, format(birthdays, "%m/%d/2019")
birthdays_2019 <- lapply(birthdays, format(birthdays, "%m/%d/2019"))
birthdays_2019 <- lapply(birthdays, format(birthdays, "%m/%d"))
birthdays_2019 <- lapply(birthdays, format, "%m/%d")
birthdays_2019 <- lapply(birthdays, format, "%m/%d/19")
print(date_has_passed(as.Date("2019-01-23")))
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
print(date_has_passed(as.Date("2019-01-23")))
make_birthday_announcement("Maya", as.Date("2019-04-05"))
make_birthday_announcement <- function(name, date) {
# "name's birthday is in n days"
# should still work if day has already passed for this year
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in", days_until_bday,days)
}
make_birthday_announcement("Maya", as.Date("2019-04-05"))
make_birthday_announcement <- function(name, date) {
# "name's birthday is in n days"
# should still work if day has already passed for this year
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in", days_until_bday, "days")
}
make_birthday_announcement("Maya", as.Date("2019-04-05"))
make_birthday_announcement("Maya", as.Date("2019-01-03"))
?paste
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in ", days_until_bday, " days", sep = "")
}
make_birthday_announcement("Maya", as.Date("2019-01-03"))
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019), birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019), birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
birthdays_2019 <- as.Date(lapply(birthdays, format, "%m/%d/19"))
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
birthday_strings <- lapply(birthdays, format, "%m/%d/19")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
print(birthdays_2019)
birthdays_2019 <- lapply(birthday_strings, as.Date)
birthday_strings <- lapply(birthdays, format, "2019-%m-%d")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
birthday_strings <- lapply(birthdays, format, "2019-%m-%d")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
# Determines whether or not the given date has passed.
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
print(date_has_passed(as.Date("2019-01-23")))
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in ", days_until_bday, " days", sep = "")
}
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019), birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
brithdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
birthdays_2019)
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
birthday_strings <- lapply(birthdays, format, "2019-%m-%d")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
# Determines whether or not the given date has passed.
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
print(date_has_passed(as.Date("2019-01-23")))
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in ", days_until_bday, " days", sep = "")
}
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
birthdays_2019)
birthdays <- list(
dad = as.Date("1972-12-04"),
mom = as.Date("1966-08-29"),
karina = as.Date("1996-09-11")
)
parent_bday <- format(birthdays[["dad"]], "%m/%d")
print(parent_bday)
birthday_strings <- lapply(birthdays, format, "2019-%m-%d")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
# Determines whether or not the given date has passed.
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
print(date_has_passed(as.Date("2019-01-23")))
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in ", days_until_bday, " days", sep = "")
}
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement,
birthdays_2019)
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019), birthdays_2019)
birthdays <- list(
dad = as.Date("1972-12-04"),
mom = as.Date("1966-08-29"),
karina = as.Date("1996-09-11")
)
parent_bday <- format(birthdays[["dad"]], "%m/%d")
print(parent_bday)
birthday_strings <- lapply(birthdays, format, "2019-%m-%d")
birthdays_2019 <- lapply(birthday_strings, as.Date)
print(birthdays_2019)
# Determines whether or not the given date has passed.
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
print(date_has_passed(as.Date("2019-01-23")))
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date)) {
days_until_bday <- date - Sys.Date() + 364
} else {
days_until_bday <- date - Sys.Date()
}
paste(name, "'s birthday is in ", days_until_bday, " days", sep = "")
}
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019), birthdays_2019)
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement,
names(birthdays_2019))
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement,
birthdays_2019)
bday_announcements <- mapply(birthdays_2019, make_birthday_announcement)
?mapply
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019),
birthdays(2019))
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019),
birthdays_2019)
print(bday_announcements)
View(mtcars)
getwd()
setwd("C:/Users/msios/Desktop/INFO 201/a2-core-skills-mayasioson1")
install.packages("lintr")
?lintr
??lintr
commas_linter
?commas_linter
library("lintr")
?commas_linter
commas_linter
commas_linter(~/Desktop/'INFO 201'/a2-core-skills-mayasioson1/assignment.R)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_points <- c(24, 17, 24, 20)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
other_team_points <- c(27, 24, 13, 17)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_points, other_team_points)
?abs
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games[["diff"]] <- abs(seahawks_points - other_team_points)
# Create a new column "won" which is TRUE if the Seahawks won the game
games[["won"]] <- seahawks_points > other_team_points
View(games)
opponent_names <- c("Broncos", "Bears", "Cowboys", "Cardinals")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponent_names
# View your data frame to see how it has changed!
View(games)
numbers_100 <- c(1:100)
employees <- c(paste("Employee", numbers_100))
?runif
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-10-exercises/exercise-2/exercise.R', echo=TRUE)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments,
stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries[["salaries_2018"]] <- salaries_2017 + salary_adjustments
view(salaries)
View(salaries)
# What was the 2018 salary of Employee 57
salaries["Employee 57", "salaries_2018"]
# What was the 2018 salary of Employee 57
salaries["57", "salaries_2018"]
?length
# How many employees got a raise?
length(salaries[["pay_raise"]] == TRUE)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries[["pay_raise"]] <- salary_adjustments > 0
# How many employees got a raise?
length(salaries[["pay_raise"]] == TRUE)
# How many employees got a raise?
length(salaries[, "pay_raise"] == TRUE)
# How many employees got a raise?
length(salaries$pay_raise== TRUE)
# How many employees got a raise?
length(salaries[salaries$pay_raise == TRUE])
# How many employees got a raise?
length(salaries[salaries[, "pay_raise"] == TRUE])
# How many employees got a raise?
pay_raises <- salaries[, "pay_raise"]
# How many employees got a raise?
pay_raises <- salaries["pay_raise"]
View(pay_raises)
?max
# What was the dollar value of the highest raise?
max(salaries[, "salary_adjustments"])
# What was the largest decrease in salaries between the two years?
min(salaries[, "salary_adjustments"])
?avg
?mean
# What was the average salary change?
mean(salaries$salary_adjustments)
setwd("C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-10-exercises/exercise-2")
?row.names
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries", row.names = FALSE)
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv", row.names = FALSE)
?nchar
?length
# How many employees got a raise?
length(salaries["pay_raise"])
# How many employees got a raise?
length(salaries[pay_raise])
# How many employees got a raise?
length(c(salaries["pay_raise"]))
# How many employees got a raise?
raises <- c(salaries[, "pay_raise"])
length(raises[raises])
# What was the "name" of the employee who received the highest raise?
salaries[[highest_raise]]
highest_raise <- max(salaries[, "salary_adjustments"])
# What was the "name" of the employee who received the highest raise?
salaries[[highest_raise]]
# For people who did not get a raise, how much money did they lose on average?
pay_cuts <- salaries[, "pay_raise"][!salaries[, "pay_raise"]]
# get negative values in salary adjustments
# find average of them
pay_cuts <- salaries$salary_adjustments[salary_adjustments < 0]
mean(pay_cuts)
# What was the largest decrease in salaries between the two years?
min(salaries[, "salary_adjustments"])
?list
# How many employees got a raise?
num_raises <- nrow(salaries[salaries$pay_raise == TRUE, ])
salaries[salaries$salary_adjustments == highest_raise, "employee"]
salaries[salaries$salary_adjustments == highest_raise, "employees"]
# What was the dollar value of the highest raise?
highest_raise <- max(salaries[, "salary_adjustments"])
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "employees"]
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
?data
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
data <- data.frame(USPersonalExpenditure)
View(data)
# What are the column names of your dataframe?
colnames(spendings)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
spendings <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(spendings)
# What are the row names of your dataframe?
rownames(spendings)
# Add a column "category" to your data frame that contains the rownames
spendings$category <- rownames(spendings)
View(spendings)
# How much money was spent on personal care in 1940?
spendings[X1940, "Personal Care"]
# How much money was spent on personal care in 1940?
spendings["X1940", "Personal Care"]
# How much money was spent on personal care in 1940?
spendings["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
spendings["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
max(spendings$category)
# What was the highest expenditure category in 1960?
max(spendings$X1960)
# What was the highest expenditure category in 1960?
spendings[max(spendings$X1960), "category"]
# What was the highest expenditure category in 1960?
spendings[spendings$X1960 == max(spendings$X1960), "category"]
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(colnames(spendings), lowest_category)
lowest_category <- function(year) {
spendings[spendings$year == min(spendings$year), "category"]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(colnames(spendings), lowest_category)
lowest_category <- function(year) {
spendings[spendings$year == min(spendings$year), "category"]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(colnames(spendings), lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(colnames(spendings)[-category], lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(colnames(spendings)[-"category"], lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(colnames(spendings)[-6], lowest_category)
# What was the highest expenditure category in 1960?
spendings[spendings$X1960 == max(spendings$X1960), "category"]
lowest_category(X1960)
lowest_category(1960)
lowest_category(1960)
spendings$category[spendings[, column]] == min[spendings[, column]]
lowest_category(1960)
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
spendings <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(spendings)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(spendings)
# Add a column "category" to your data frame that contains the rownames
spendings$category <- rownames(spendings)
# How much money was spent on personal care in 1940?
spendings["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
spendings["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
spendings[spendings$X1960 == max(spendings$X1960), "category"]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
column <- paste0("X", year)
spendings$category[spendings[, column]] == min[spendings[, column]]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
lowest_category(1960)
lowest_category(1960)
lowest_category(1960)
lowest_category <- function(year) {
column <- paste0("X", year)
spendings$category[spendings[, column]] == min(spendings[, column])
}
lowest_category(1960)
source('C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-10-exercises/exercise-3/exercise.R', echo=TRUE)
lowest_category(1960)
lowest_category <- function(year) {
column <- paste0("X", year)
spendings$category[spendings[, column] == min(spendings[, column])]
}
lowest_category(1960)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
setwd("C:/Users/msios/Desktop/INFO 201/book-exercises/chapter-10-exercises/exercise-4")
?read.csv
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
gates_grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(gates_grants)
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- gates_grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(gates_grants$total_amount)
# What was the dollar amount of the largest grant?
max(gates_grants$total_amount)
# What was the dollar amount of the smallest grant?
min(gates_grants$total_amount)
# Which organization received the largest grant?
gates_grants[gates_grants$total_amount == max(gates_grants$total_amount), "organization"]
largest <- max(gates_grants$total_amount)
# What was the dollar amount of the smallest grant?
smallest <- min(gates_grants$total_amount)
# Which organization received the largest grant?
gates_grants[gates_grants$total_amount == largest, "organization"]
# Which organization received the smallest grant?
gates_grants[gates_grants$total_amount == smallest, "organization"]
# How many grants were awarded in 2010?
nrow(gates_grants$start_year == TRUE)
# How many grants were awarded in 2010?
nrow(gates_grants$start_year == 2010)
# How many grants were awarded in 2010?
nrow(gates_grants$start_year[start_year] == 2010)
# How many grants were awarded in 2010?
nrow(gates_grants[gates_grants$start_year == 2010, ])
